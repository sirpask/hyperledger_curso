#1Tipos de nodos: una de ordenamiento, Orderer. EN SANS es para que muerda correr por la red, aqui como todo esta en el mismo servidor, pues localhost
#Los Nodos tipo PeerOrgs el Count es el numero de nodos por defecto, User Count 1 re crea un usuario y el root creo
# Despues de crear este archivo de diseño, hay que crear el matgerial criptografico:
#2 sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ cryptogen generate --config=./crypto-config.yam
# EL cryptogen se descarga dentro de hyperledger, concretamente en sirpask@ali12:~/hyperledger/fabric/fabric-samples/bin$ cd
#en los archivos que te descargasgas de hyperledger.
# sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ cryptogen generate --config=./crypto-config.yaml
#org1.acme.com
#org2.acme.com
#org3.acme.com
# 3 Se ha creado una carpeta cryto-config con toda la mandanga y se sube a github
#sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ git add crypto-config
#sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ git commit -m "agrego crypto-config.yaml"
#git push -u origin master
#4 comprobar certificados para 10 años de admin por ejemplo en https://www.dondominio.com/products/ssl/tools/ssl-checker/
# 5 añadimos "configtx.yaml" de https://github.com/blockchainempresarial/curso-hyperledger-fabric/blob/master/acme-network/configtx.yaml
# archivo super importante con secciones para configurar:
# *- seccion de organizaciones:
# A- como correra de inicio la organizacion por la red, proveedor de servicios de membresia MSP, directorio de donde se creo.
#     para que funcione todo esto tiene que estar generado lo de cryptogen.
#     Le damos a admin todos los permisos
#     EL endpoint es el servicio que vamos a levantar y su puerto
#
# B- configuracin de cada organizacion:
#     se definen permisos
# C- el anchorPeers es el peer de contacto con el resto de organizaciones, 1 por organizacion.
# *-seccion de Capabilities:
#  capas de una red de fabric, se define la version de hyperledger fabric para cada una de las capas, canal, ordenacion y aplicacion
# *-Seccion de Aplicaciones:
# definimos permisos por dedecto para las apps
#*- seccion de ordenamiento:
#   3 tipos: "solo" para test.
#            "kafka (apache)" antes de la vertsion 2 para produccion
#             "etcdraft" para produccion
#
#el configuracion solo usa:
#        BatchTimeout: 2s
#        BatchSize:
#            MaxMessageCount: 10
#            AbsoluteMaxBytes: 99 MB
#            PreferredMaxBytes: 512 KB
#*- seccion de canales
#      Politicas. (permisos)
#- seccion de profile (perfiles)
#      Politicas. (permisos)
#-       ThreeOrgsOrdererGenesis:   <<< el nombre que quieras, que vas a hacer desde el principio y el bloque genses es una configuracion
#            <<: *ChannelDefaults  >>coge las configuraciones anteriores
#           Orderer:
#                <<: *OrdererDefaults
#                Organizations:
#                    - *OrdererOrg
#                Capabilities:
#                    <<: *OrdererCapabilities
#            Consortiums:
#                SampleConsortium:
#                    Organizations:
#                        - *Org1
#                        - *Org2
#                        - *Org3
#        ThreeOrgsChannel:
#            Consortium: SampleConsortium
#            <<: *ChannelDefaults
#            Application:
#                <<: *ApplicationDefaults
#                Organizations:
#                    - *Org1
#                    - *Org2
#                    - *Org3
#                Capabilities:
#                    <<: *ApplicationCapabilities
#
#vamos al configtx.yaml y vemos el profile, ahora crearemos sus definiciones la del ThreeOrgsChannel y la del ThreeOrgsOrdererGenesis
#6.- una vez configurado todo, lanzamos el comando: sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ configtxgen -profile ThreeOrgsOrdererGenesis -channelID system-channel -outputBlock ./channel-artifacts/genesis.block
#7.- ahora creamos la transaccion del canal: configtxgen -profile ThreeOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID marketplace  ((el nombre del canal "marketplace" me lo invento, el que quiera))
#8.- hay que generar ahora los 3 PanchorsPeers:
#configtxgen -profile ThreeOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID marketplace -asOrg Org1MSP
#configtxgen -profile ThreeOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID marketplace -asOrg Org2MSP
#configtxgen -profile ThreeOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org3MSPanchors.tx -channelID marketplace -asOrg Org3MSP
#
# Hasta aqui es el diseño de la red, a partir de aqui entra lo dinamico y uso de dockers:
#
#9.-Creamos ahora una clase padre, abstracta desde la que clases hijas puedan estender y crear sus objetos, creando una carpeta Base y metiendo el peer-base-yaml
#servicio peer-base.yaml va a despleagar una image con docker compose> la imagen esta en docker hub para levantar el peer, trata un servicio general.
#*********************************************
# inciso, actores necesarios para montar una red Hyperledger ***Arquitectos, desarrolladores<<< y de mantenimiento> monitoreo (operador)
#**En configtx.yaml > SECTION: Orderer > solo > es solo para pruebas, no es confiable. kafka aun se sigue usando en producion pero solo para redes permisionaras con entornos confiables, hay intencion de trabajar en conjunto entre todas las entidades, tiene tolerancia a crashing (soporta petes). 50+1 K.O. Hay una organizacion fundadora, y la otras tienen rol mas libianos.
#** Con transaccines complicadas, y nodos no confiables > Rav mejor, concepto mas descentralizado. Cada organizacion tienen su propio RAV.
#*********************************************
#10-base/docker-compose-base.yaml >> no sirve para levantar la red, sirve para definir algunos componentes, algunos servicios de forma individual, como los peer de ordenacion, y los peer normales. ejemplo> peer0.org1.acme.com > este servicio crea/define el peer 1, el PEER_ID: es el nombre bueno. ojo, esto no funcionaria por que los nombres de los peers no aceptan puntos(dependiendo como se despliegue, docker swarmp no, en docker docker host como pila si) ejemplo: linea 39 del fichero. (el 7050 es el puerto dentro del contenerdor, se podria redireccionar fuera)
# CORE_PEER_LOCALMSPID=  <<<Org1MSP>> este es el identificador unico del peer en la red y este fichero monta todos los ficheros que henmos creado al principio
#11.- Para este ejemplo hay que montar una red de docker. Para poder montar 3 contgenedores que se comuniquen entre ellos.
#Hay que configurar la red desde el docker compose, se define toda la red desde ahi. Si hubiera que cambiar las redes o puertos por que ya estan en uso, si que habria que tocar la red desde el docker puro y duro, sin la ayuda del compose.
# cada contenedor va a tener un IP, (como si fueran maquinas independientes) en principio todos los contenerdores van a tener el mismo puerto 7051, pero desde la configuracion de docker se les homologa en rangos de 1000 para que no interfieran entre ellos, y luego se parchea por fuera con el puerto que tengamos, para que no interfiera en los puertos de nuestra maquina.
#Si hay varias organizaciones con maquinas separadas, cada organizacion tiene que montar un docker compose para levantar los peers
#Cada organizacion tendria su material criptografico oculto del resto de organizaciones, en este ejemplo al estar montado todo en una maquina esta todo en la misma carpeta.
#Una cadena blockchain a parte de peers, neceista tambien nodos de ordenacion (y se configura este servicio de ordenamiento tambien en el docker-compose-base.yaml), y hay que configurarlo
#
#Video 4 (resumen de todo lo anterior) > 12.- docker-compose-cli-couchdb.yaml >> para crear la red compose. Pones el orden para levantar los servicios en la red: orderer.acme.com:> peer0.org1.acme.com: > peer0.org2.acme.com: > peer0.org3.acme.com: > certificados > couchdb: (base de datos nosql de Apache), cada peer un couchdb
#Al final, Hyperledger fabric son 4 archivos de configuracion para poder desplegar la red.
# el primero es configtx.yaml
#a)el peer-base: definicion del comportamiento y las configuraciones de un peer como tal.
#b)docker-compose-base > me ayuda a definir algunos componentes, y adefinir la red blockchain (utilizar la misma version del docker coompose que en el base, en este caso 2) aqui se configuran puertos y el gRPC server para las transacciones. ) y todo junto se relaciona entre si con una red docker.
#c)docker-compose-cli-couchdb.yaml > definir el almacen de datos del libro distrribuido para cada peer, y definir la autoridad de certificacion para que esto funcione, y definir un contenedor de erramientas para configurar el canal y demas.
# por ultimo para levantar los servicios de Hyperledger fabric es crear una carpeta de chaincode (para los contratos inteligentes)
#asi pues al final de todo dentro de nuestra red (acme-network) tenenos las siguientes carpetas:
#base
#chaincode
#channel-artifacts
#cryto-config
#docker/labs > este yo creo que es de ejemplo.
# dentro de base> docker-compose-base.yaml y acme-network/base/peer-base.yaml
# dentro de channel-artifacts > acme-network/channel-artifacts/channel.tx, acme-network/channel-artifacts/genesis.block, acme-network/channel-artifacts/Org1MSPanchors.tx, acme-network/channel-artifacts/Org2MSPanchors.tx,acme-network/channel-artifacts/Org3MSPanchors.tx
# dentro de cryto-config > dos carpetas: acme-network/crypto-config/ordererOrganizations, acme-network/crypto-config/peerOrganizations
# y luego dentro del directorio principal 3 ficheros de configuracion: acme-network/configtx.yaml, acme-network/crypto-config.yaml, acme-network/docker-compose-cli-couchdb.yaml
#11 .- Despliegue.
# Usar portainer.Herramienta, crearemos un volumen de docker: docker volume create portainer_data y luego ejecutamos portainer:
# docker run -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer  (esto lo descarga el solo y lo descarga)
# Rapidamente (tenemos unos 3 minutos) vamos al  browser y ponermos localhost:9000 > y sale el servidor arrancado. (creamos un usuario admin y elegimos local > conectar)
#12 creamos unas variables para ayudar a levatar el servicio
# las variables son: export CHANNEL_NAME=marketplace
#                    export VERBOSE=false
#                    export FABRIC_CFG_PATH=$PWD
# Ahora arrancaremos docker-compose-cli-couchdb.yaml con el comando: CHANNEL_NAME=$CHANNEL_NAME docker-compose -f docker-compose-cli-couchdb.yaml up -d  (- f es de fichero, -d es que lo ejecute y podamos seguir usando la pantalla, que no se quede ahi como pasa con el mongo, que se quede en segundo plano).
#Creating network "acme-network_basic" with the default driver
#Pulling couchdb0 (couchdb:3.1)...
#3.1: Pulling from library/couchdb
#d121f8d1c412: Pull complete
#36f0ba3ab6ff: Pull complete
#4ad755530f10: Pull complete
#85b93b47d5de: Pull complete
#914762042288: Pull complete
#a19d0d042d73: Pull complete
#e5072937c22e: Pull complete
#3a2c37f3e964: Pull complete
#cec4e3b21e82: Pull complete
#06823e20f7d4: Pull complete
#87dc384bcdb0: Pull complete
#Digest: sha256:b604d056d8024f10346eab768de7aea06bc0a1b7c55d6087e1b1cd4328c8061c
#Status: Downloaded newer image for couchdb:3.1
#Creating orderer.acme.com ... done
#Creating peer0.org1.acme.com ... done
#Creating couchdb2         ... done
#Creating couchdb0         ... done
#Creating peer0.org3.acme.com ... done
#Creating peer0.org1.acme.com ... done
#Creating peer0.org2.acme.com ... done
#Creating cli                 ... done
#--> esta mal, faltaria el ordereer.acme.com// el couchdb1 y el ca.org1.acme.com  y el peer0.org1.acme.com esta duplicado.
# Y para ver que todo a arrancado bien: docker ps y vemos que aunque en el otro lado pone que flatan cosas, aqui está bien levantado.
#
#pepitoperez:~/Escritorio/hyperledger_curso$ docker ps
#CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                                            NAMES
#bb00895b8077        hyperledger/fabric-tools:2.2       "/bin/bash"              4 minutes ago       Up 4 minutes                                                         cli
#22a2255af16c        hyperledger/fabric-peer:2.2.0      "peer node start"        4 minutes ago       Up 4 minutes        0.0.0.0:8051->7051/tcp, 0.0.0.0:8053->7053/tcp   peer0.org2.acme.com
#b11a76e293f1        hyperledger/fabric-peer:2.2.0      "peer node start"        4 minutes ago       Up 4 minutes        0.0.0.0:7051->7051/tcp, 0.0.0.0:7053->7053/tcp   peer0.org1.acme.com
#4884dd4ac3a8        hyperledger/fabric-peer:2.2.0      "peer node start"        4 minutes ago       Up 4 minutes        0.0.0.0:9051->7051/tcp, 0.0.0.0:9053->7053/tcp   peer0.org3.acme.com
#02d88feadfd7        hyperledger/fabric-ca:1.4.8        "sh -c 'fabric-ca-se…"   4 minutes ago       Up 4 minutes        0.0.0.0:7054->7054/tcp                           ca.org1.acme.com
#0b53dec2d404        couchdb:3.1                        "tini -- /docker-ent…"   4 minutes ago       Up 4 minutes        4369/tcp, 9100/tcp, 0.0.0.0:5984->5984/tcp       couchdb0
#2e6816f9be48        couchdb:3.1                        "tini -- /docker-ent…"   4 minutes ago       Up 4 minutes        4369/tcp, 9100/tcp, 0.0.0.0:5986->5984/tcp       couchdb2
#62fe3a2f3d39        couchdb:3.1                        "tini -- /docker-ent…"   4 minutes ago       Up 4 minutes        4369/tcp, 9100/tcp, 0.0.0.0:5985->5984/tcp       couchdb1
#58dea0a5300d        hyperledger/fabric-orderer:2.2.0   "orderer"                4 minutes ago       Up 4 minutes        0.0.0.0:7050->7050/tcp                           orderer.acme.com
#67e4e28e9dec        portainer/portainer                "/portainer"             22 minutes ago      Up 22 minutes       0.0.0.0:8000->8000/tcp, 0.0.0.0:9000->9000/tcp   lucid_shaw
#
#13.- LUego vamos a localhost:9000 > containers > y entramos en la consola del contenedor cli.
# Vemos donde estamos:
#bash-5.0# pwd
#/opt/gopath/src/github.com/hyperledger/fabric/peer
#bash-5.0#
# _> ahora falta crear un canal. Creamos anteriormente una transaccion y una configuracion de como queremos ese canal, pero usamos la consola de cli para arrancar el canar con la configuracion anteriormente creada en
# la carpeta chanel-artifacts
# volvemos a poner el nombre del canar en una variable global: export CHANNEL_NAME=marketplace  (esto igual no habria que volverlo hacer, pero no cuesta nada)
#ahora lanzamos el comando: peer channel create -o orderer.acme.com:7050 -c SCHANNEL_NAME -f ./channel-artifacts/channel.tx (asi se podria lanzar, pero ojo, al haberlo echo todo con seguridad tls, hay qye ponerlo por lo que quedaria:!!)
# peer channel create -o orderer.acme.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/acme.com/orderers/orderer.acme.com/msp/tlscacerts/tlsca.acme.com-cert.pem
# Fatal error when initializing core config : Could not find config file. Please make sure that FABRIC_CFG_PATH is set to a path which contains core.yaml
#
OrdererOrgs:
  - Name: Orderer
    Domain: acme.com
    EnableNodeOUs: true
    Specs:
      - Hostname: orderer
        SANS:
          - localhost
PeerOrgs:
  - Name: Org1
    Domain: org1.acme.com
    EnableNodeOUs: true
    Template:
      Count: 1
      SANS:
        - localhost
    Users:
      Count: 1
  - Name: Org2
    Domain: org2.acme.com
    EnableNodeOUs: true
    Template:
      Count: 1
      SANS:
        - localhost
    Users:
      Count: 1
  - Name: Org3
    Domain: org3.acme.com
    EnableNodeOUs: true
    Template:
      Count: 1
      SANS:
        - localhost
    Users:
      Count: 1
