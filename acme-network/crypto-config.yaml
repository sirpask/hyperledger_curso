#1Tipos de nodos: una de ordenamiento, Orderer. EN SANS es para que muerda correr por la red, aqui como todo esta en el mismo servidor, pues localhost
#Los Nodos tipo PeerOrgs el Count es el numero de nodos por defecto, User Count 1 re crea un usuario y el root creo
# Despues de crear este archivo de dise単o, hay que crear el matgerial criptografico:
#2 sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ cryptogen generate --config=./crypto-config.yam
# EL cryptogen se descarga dentro de hyperledger, concretamente en sirpask@ali12:~/hyperledger/fabric/fabric-samples/bin$ cd
#en los archivos que te descargasgas de hyperledger.
# sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ cryptogen generate --config=./crypto-config.yaml
#org1.acme.com
#org2.acme.com
#org3.acme.com
# 3 Se ha creado una carpeta cryto-config con toda la mandanga y se sube a github
#sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ git add crypto-config
#sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ git commit -m "agrego crypto-config.yaml"
#git push -u origin master
#4 comprobar certificados para 10 a単os de admin por ejemplo en https://www.dondominio.com/products/ssl/tools/ssl-checker/
# 5 a単adimos "configtx.yaml" de https://github.com/blockchainempresarial/curso-hyperledger-fabric/blob/master/acme-network/configtx.yaml
# archivo super importante con secciones para configurar:
# *- seccion de organizaciones:
# A- como correra de inicio la organizacion por la red, proveedor de servicios de membresia MSP, directorio de donde se creo. 
#     para que funcione todo esto tiene que estar generado lo de cryptogen.
#     Le damos a admin todos los permisos
#     EL endpoint es el servicio que vamos a levantar y su puerto
#
# B- configuracin de cada organizacion:
#     se definen permisos
# C- el anchorPeers es el peer de contacto con el resto de organizaciones, 1 por organizacion.    
# *-seccion de Capabilities:
#  capas de una red de fabric, se define la version de hyperledger fabric para cada una de las capas, canal, ordenacion y aplicacion
# *-Seccion de Aplicaciones:
# definimos permisos por dedecto para las apps
#*- seccion de ordenamiento:
#   3 tipos: "solo" para test.
#            "kafka (apache)" antes de la vertsion 2 para produccion
#             "etcdraft" para produccion
#
#el configuracion solo usa:
#        BatchTimeout: 2s
#        BatchSize:
#            MaxMessageCount: 10
#            AbsoluteMaxBytes: 99 MB
#            PreferredMaxBytes: 512 KB
#*- seccion de canales
#      Politicas. (permisos)      
#- seccion de profile (perfiles)
#      Politicas. (permisos)
#-       ThreeOrgsOrdererGenesis:   <<< el nombre que quieras, que vas a hacer desde el principio y el bloque genses es una configuracion
#            <<: *ChannelDefaults  >>coge las configuraciones anteriores
#           Orderer:
#                <<: *OrdererDefaults
#                Organizations:
#                    - *OrdererOrg
#                Capabilities:
#                    <<: *OrdererCapabilities
#            Consortiums:
#                SampleConsortium:
#                    Organizations:
#                        - *Org1
#                        - *Org2
#                        - *Org3
#        ThreeOrgsChannel:
#            Consortium: SampleConsortium
#            <<: *ChannelDefaults
#            Application:
#                <<: *ApplicationDefaults
#                Organizations:
#                    - *Org1
#                    - *Org2
#                    - *Org3
#                Capabilities:
#                    <<: *ApplicationCapabilities
#    
#vamos al configtx.yaml y vemos el profile, ahora crearemos sus definiciones la del ThreeOrgsChannel y la del ThreeOrgsOrdererGenesis
#6.- una vez configurado todo, lanzamos el comando: sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ configtxgen -profile ThreeOrgsOrdererGenesis -channelID system-channel -outputBlock ./channel-artifacts/genesis.block
#7.- ahora creamos la transaccion del canal: configtxgen -profile ThreeOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID marketplace  ((el nombre del canal "marketplace" me lo invento, el que quiera))
#8.- hay que generar ahora los 3 PanchorsPeers: 
#configtxgen -profile ThreeOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID marketplace -asOrg Org1MSP
#configtxgen -profile ThreeOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID marketplace -asOrg Org2MSP
#configtxgen -profile ThreeOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org3MSPanchors.tx -channelID marketplace -asOrg Org3MSP
#
# Hasta aqui es el dise単o de la red, a partir de aqui entra lo dinamico y uso de dockers:
#
#Creamos ahora una clase padre, abstracta desde la que clases hijas puedan estender y crear sus objetos, creando una carpeta Base y metiendo el peer-base-yaml
#servicio peer-base va a despleagar una image con docker compose> la imagen esta en docker hub para levantar el peer
#
#
#
#
#
#
OrdererOrgs:
  - Name: Orderer
    Domain: acme.com
    EnableNodeOUs: true
    Specs:
      - Hostname: orderer
        SANS:
          - localhost
PeerOrgs:
  - Name: Org1
    Domain: org1.acme.com
    EnableNodeOUs: true
    Template:
      Count: 1
      SANS:
        - localhost
    Users:
      Count: 1
  - Name: Org2
    Domain: org2.acme.com
    EnableNodeOUs: true
    Template:
      Count: 1
      SANS:
        - localhost
    Users:
      Count: 1
  - Name: Org3
    Domain: org3.acme.com
    EnableNodeOUs: true    
    Template:
      Count: 1
      SANS:
        - localhost
    Users:
      Count: 1