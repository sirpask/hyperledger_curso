#1Tipos de nodos: una de ordenamiento, Orderer. EN SANS es para que muerda correr por la red, aqui como todo esta en el mismo servidor, pues localhost
#Los Nodos tipo PeerOrgs el Count es el numero de nodos por defecto, User Count 1 re crea un usuario y el root creo
# Despues de crear este archivo de dise単o, hay que crear el matgerial criptografico:
#2 sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ cryptogen generate --config=./crypto-config.yam
# EL cryptogen se descarga dentro de hyperledger, concretamente en sirpask@ali12:~/hyperledger/fabric/fabric-samples/bin$ cd
#en los archivos que te descargasgas de hyperledger.
# sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ cryptogen generate --config=./crypto-config.yaml
#org1.acme.com
#org2.acme.com
#org3.acme.com
# 3 Se ha creado una carpeta cryto-config con toda la mandanga y se sube a github
#sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ git add crypto-config
#sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ git commit -m "agrego crypto-config.yaml"
#git push -u origin master
#4 comprobar certificados para 10 a単os de admin por ejemplo en https://www.dondominio.com/products/ssl/tools/ssl-checker/
# 5 a単adimos "configtx.yaml" de https://github.com/blockchainempresarial/curso-hyperledger-fabric/blob/master/acme-network/configtx.yaml
# archivo super importante con secciones para configurar:
# *- seccion de organizaciones:
# A- como correra de inicio la organizacion por la red, proveedor de servicios de membresia MSP, directorio de donde se creo. 
#     para que funcione todo esto tiene que estar generado lo de cryptogen.
#     Le damos a admin todos los permisos
#     EL endpoint es el servicio que vamos a levantar y su puerto
#
# B- configuracin de cada organizacion:
#     se definen permisos
# C- el anchorPeers es el peer de contacto con el resto de organizaciones, 1 por organizacion.    
# *-seccion de Capabilities:
#  capas de una red de fabric, se define la version de hyperledger fabric para cada una de las capas, canal, ordenacion y aplicacion
# *-Seccion de Aplicaciones:
# definimos permisos por dedecto para las apps
#*- seccion de ordenamiento:
#   3 tipos: "solo" para test.
#            "kafka (apache)" antes de la vertsion 2 para produccion
#             "etcdraft" para produccion
#
#el configuracion solo usa:
#        BatchTimeout: 2s
#        BatchSize:
#            MaxMessageCount: 10
#            AbsoluteMaxBytes: 99 MB
#            PreferredMaxBytes: 512 KB
#*- seccion de canales
#      Politicas. (permisos)      
#- seccion de profile (perfiles)
#      Politicas. (permisos)
#-       ThreeOrgsOrdererGenesis:   <<< el nombre que quieras, que vas a hacer desde el principio y el bloque genses es una configuracion
#            <<: *ChannelDefaults  >>coge las configuraciones anteriores
#           Orderer:
#                <<: *OrdererDefaults
#                Organizations:
#                    - *OrdererOrg
#                Capabilities:
#                    <<: *OrdererCapabilities
#            Consortiums:
#                SampleConsortium:
#                    Organizations:
#                        - *Org1
#                        - *Org2
#                        - *Org3
#        ThreeOrgsChannel:
#            Consortium: SampleConsortium
#            <<: *ChannelDefaults
#            Application:
#                <<: *ApplicationDefaults
#                Organizations:
#                    - *Org1
#                    - *Org2
#                    - *Org3
#                Capabilities:
#                    <<: *ApplicationCapabilities
#    
#vamos al configtx.yaml y vemos el profile, ahora crearemos sus definiciones la del ThreeOrgsChannel y la del ThreeOrgsOrdererGenesis
#6.- una vez configurado todo, lanzamos el comando: sirpask@ali12:~/Escritorio/hyperledger_curso/acme-network$ configtxgen -profile ThreeOrgsOrdererGenesis -channelID system-channel -outputBlock ./channel-artifacts/genesis.block
#7.- ahora creamos la transaccion del canal: configtxgen -profile ThreeOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID marketplace  ((el nombre del canal "marketplace" me lo invento, el que quiera))
#8.- hay que generar ahora los 3 PanchorsPeers: 
#configtxgen -profile ThreeOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID marketplace -asOrg Org1MSP
#configtxgen -profile ThreeOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID marketplace -asOrg Org2MSP
#configtxgen -profile ThreeOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org3MSPanchors.tx -channelID marketplace -asOrg Org3MSP
#
# Hasta aqui es el dise単o de la red, a partir de aqui entra lo dinamico y uso de dockers:
#
#9.-Creamos ahora una clase padre, abstracta desde la que clases hijas puedan estender y crear sus objetos, creando una carpeta Base y metiendo el peer-base-yaml
#servicio peer-base.yaml va a despleagar una image con docker compose> la imagen esta en docker hub para levantar el peer, trata un servicio general.
#*********************************************
# inciso, actores necesarios para montar una red Hyperledger ***Arquitectos, desarrolladores<<< y de mantenimiento> monitoreo (operador)
#**En configtx.yaml > SECTION: Orderer > solo > es solo para pruebas, no es confiable. kafka aun se sigue usando en producion pero solo para redes permisionaras con entornos confiables, hay intencion de trabajar en conjunto entre todas las entidades, tiene tolerancia a crashing (soporta petes). 50+1 K.O. Hay una organizacion fundadora, y la otras tienen rol mas libianos.
#** Con transaccines complicadas, y nodos no confiables > Rav mejor, concepto mas descentralizado. Cada organizacion tienen su propio RAV.
#*********************************************
#10-base/docker-compose-base.yaml >> no sirve para levantar la red, sirve para definir algunos componentes, algunos servicios de forma individual, como los peer de ordenacion, y los peer normales. ejemplo> peer0.org1.acme.com > este servicio crea/define el peer 1, el PEER_ID: es el nombre bueno. ojo, esto no funcionaria por que los nombres de los peers no aceptan puntos ejemplo: linea 39 del fichero. (el 7050 es el puerto dentro del contenerdor, se podria redireccionar fuera)
# CORE_PEER_LOCALMSPID=  <<<Org1MSP>> este es el identificador unico del peer en la red y este fichero monta todos los ficheros que henmos creado al principio
#11.- Para este ejemplo hay que montar una red de docker. Para poder montar 3 contgenedores que se comuniquen entre ellos.
#Hay que configurar la red desde el docker compose, se define toda la red desde ahi. Si hubiera que cambiar las redes o puertos por que ya estan en uso, si que habria que tocar la red desde el docker puro y duro, sin la ayuda del compose.
# cada contenedor va a tener un IP, (como si fueran maquinas independientes) en principio todos los contenerdores van a tener el mismo puerto 7051, pero desde la configuracion de docker se les homologa en rangos de 1000 para que no interfieran entre ellos, y luego se parchea por fuera con el puerto que tengamos, para que no interfiera en los puertos de nuestra maquina.
#Si hay varias organizaciones con maquinas separadas, cada organizacion tiene que montar un docker compose para levantar los peers
#Cada organizacion tendria su material criptografico oculto del resto de organizaciones, en este ejemplo al estar montado todo en una maquina esta todo en la misma carpeta.
#Una cadena blockchain a parte de peers, neceista tambien nodos de ordenacion (y se configura este servicio de ordenamiento tambien en el docker-compose-base.yaml), y hay que configurarlo
#
#Video 4 > 12.- docker-compose-cli-couchdb.yaml >> para crear la red compose. Pones el orden para levantar los servicios en la red: orderer.acme.com:> peer0.org1.acme.com: > peer0.org2.acme.com: > peer0.org3.acme.com: > certificados > couchdb: (base de datos nosql de Apache), cada peer un couchdb 
#
OrdererOrgs:
  - Name: Orderer
    Domain: acme.com
    EnableNodeOUs: true
    Specs:
      - Hostname: orderer
        SANS:
          - localhost
PeerOrgs:
  - Name: Org1
    Domain: org1.acme.com
    EnableNodeOUs: true
    Template:
      Count: 1
      SANS:
        - localhost
    Users:
      Count: 1
  - Name: Org2
    Domain: org2.acme.com
    EnableNodeOUs: true
    Template:
      Count: 1
      SANS:
        - localhost
    Users:
      Count: 1
  - Name: Org3
    Domain: org3.acme.com
    EnableNodeOUs: true    
    Template:
      Count: 1
      SANS:
        - localhost
    Users:
      Count: 1